{
	"info": {
		"_postman_id": "02e5251f-2477-4da6-92a8-27e59e07483d",
		"name": "dmoney-project-12",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33632557"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Unsuccessful Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"pm.test(\"Check if login is unsuccessful\",()=>{\r",
											"    pm.expect(jsonData.message).includes(\"Password incorrect\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"12345\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let token = jsonData.token;\r",
											"pm.collectionVariables.set(\"token\", token);\r",
											"\r",
											"pm.test(\"Check if login is successful\",()=>{\r",
											"    pm.expect(jsonData.message).includes(\"Login successful\")\r",
											"})\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create User",
					"item": [
						{
							"name": "Create Agent",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomId=_.random(100000,999999)\r",
											"let prefix=\"01824\";\r",
											"let phoneNumber=prefix+randomId;\r",
											"console.log(phoneNumber);\r",
											"\r",
											"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData=pm.response.json();\r",
											"//let userId= jsonData.user.id;\r",
											"let userEmail=jsonData.user.email; // Define userEmail variable\r",
											"//pm.collectionVariables.set(\"userId\",userId);\r",
											"pm.collectionVariables.set(\"userEmail\",userEmail.toLowerCase());\r",
											"\r",
											"pm.test(\"Check new user is created\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User created\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"1234\",\r\n  \"phone_number\": \"{{phoneNumber}}\",\r\n  \"nid\": \"2546546\",\r\n  \"role\": \"Agent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customer 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomId=_.random(100000,999999)\r",
											"let prefix=\"01824\";\r",
											"let phoneNumber=prefix+randomId;\r",
											"console.log(phoneNumber);\r",
											"\r",
											"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData=pm.response.json();\r",
											"//let userId= jsonData.user.id;\r",
											"let userEmail=jsonData.user.email; // Define userEmail variable\r",
											"//pm.collectionVariables.set(\"userId\",userId);\r",
											"pm.collectionVariables.set(\"userEmail\",userEmail.toLowerCase());\r",
											"\r",
											"pm.test(\"Check new user is created\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User created\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"1234\",\r\n  \"phone_number\": \"{{phoneNumber}}\",\r\n  \"nid\": \"2546546\",\r\n  \"role\": \"Customer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customer 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomId=_.random(100000,999999)\r",
											"let prefix=\"01824\";\r",
											"let phoneNumber=prefix+randomId;\r",
											"console.log(phoneNumber);\r",
											"\r",
											"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData=pm.response.json();\r",
											"//let userId= jsonData.user.id;\r",
											"let userEmail=jsonData.user.email; // Define userEmail variable\r",
											"//pm.collectionVariables.set(\"userId\",userId);\r",
											"pm.collectionVariables.set(\"userEmail\",userEmail.toLowerCase());\r",
											"\r",
											"pm.test(\"Check new user is created\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User created\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"1234\",\r\n  \"phone_number\": \"{{phoneNumber}}\",\r\n  \"nid\": \"2546546\",\r\n  \"role\": \"Customer\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Merchant",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomId=_.random(100000,999999)\r",
											"let prefix=\"01824\";\r",
											"let phoneNumber=prefix+randomId;\r",
											"console.log(phoneNumber);\r",
											"\r",
											"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData=pm.response.json();\r",
											"//let userId= jsonData.user.id;\r",
											"let userEmail=jsonData.user.email; // Define userEmail variable\r",
											"//pm.collectionVariables.set(\"userId\",userId);\r",
											"pm.collectionVariables.set(\"userEmail\",userEmail.toLowerCase());\r",
											"\r",
											"pm.test(\"Check new user is created\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User created\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{$randomFirstName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"1234\",\r\n  \"phone_number\": \"{{phoneNumber}}\",\r\n  \"nid\": \"2546546\",\r\n  \"role\": \"Merchant\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create agent with existing phoneNumber",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let randomId=_.random(100000,999999)\r",
											"let prefix=\"01824\";\r",
											"let phoneNumber=prefix+randomId;\r",
											"console.log(phoneNumber);\r",
											"\r",
											"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData=pm.response.json();\r",
											"\r",
											"pm.test(\"Check user already exist\", function () {\r",
											"    pm.expect(jsonData.message).includes(\"User already exists\");\r",
											"});\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{token}}",
										"type": "text"
									},
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{partnerKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Sir1 Shakhawat\",\r\n  \"email\": \"sh1opi@gmail.com\",\r\n  \"password\": \"1234\",\r\n  \"phone_number\": \"01824254206\",\r\n  \"nid\": \"43547956\",\r\n  \"role\": \"Agent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"create"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "System",
			"item": [
				{
					"name": "System deposit money to agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"\r",
									"pm.test(\"Check if balance is transfered\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Deposit successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"01824197931\",\r\n  \"amount\": 4000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "System deposit money to agent less than 10tk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"\r",
									"pm.test(\"Check if balance is less than 10 taka\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Minimum deposit amount is 10 tk and maximum deposit amount is 10000 tk\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"01824254206\",\r\n  \"amount\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Agent",
			"item": [
				{
					"name": "Agent deposit money to customer 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if balance is transfered\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Deposit successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"from_account\": \"01824197931\",\r\n  \"to_account\": \"01824994028\",\r\n  \"amount\": 800\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "check agent's balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if balance is displayed\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01824197931",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01824197931"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent deposit money to customer 1 more than balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if balance is insufficient\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Insufficient balance\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"from_account\": \"01824197931\",\r\n  \"to_account\": \"01824994028\",\r\n  \"amount\": 28000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "check non existence agent's balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if agent exists\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User not found\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01824197941",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01824197941"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer 1",
			"item": [
				{
					"name": "Customer 1 sends money to customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if balance is transfered\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Send money successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"from_account\": \"01824994028\",\r\n  \"to_account\": \"01824630126\",\r\n  \"amount\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw money from customer to the agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if withdraw is successful\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Withdraw successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"from_account\": \"01824994028\",\r\n  \"to_account\": \"01824197931\",\r\n  \"amount\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check customer 1's transaction statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check transaction statement by txn id\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Transaction list\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/search/TXN474308",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"search",
								"TXN474308"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check customer 1's balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if balance is displayed\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01824994028",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01824994028"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer 1 sends money to customer 1 itself",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if From and to account is same\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"From account and to account cannot be the same\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"from_account\": \"01824994028\",\r\n  \"to_account\": \"01824994028\",\r\n  \"amount\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw money from customer to the agent less than 10tk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if withdraw amount is less than 10 taka\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Minimum withdraw amount is 10 tk\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"from_account\": \"01824994028\",\r\n  \"to_account\": \"01824197931\",\r\n  \"amount\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check customer 1's transaction ID is valid or not",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check transaction ID is valid or not\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Transaction not found\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/search/TXN4743088",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"search",
								"TXN4743088"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer 2",
			"item": [
				{
					"name": "Customer 2 makes payment to merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if payment is transfered\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Payment successful\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"from_account\": \"01824630126\",\r\n  \"to_account\": \"01824978944\",\r\n  \"amount\": 50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check customer 2's transaction statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check transaction statement by txn id\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Transaction list\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/search/TXN760287",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"search",
								"TXN760287"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check customer 2's balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if balance is displayed\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01824630126",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01824630126"
							]
						}
					},
					"response": []
				},
				{
					"name": "Customer 2 makes payment to merchant more than balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if balance is insufficient\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Insufficient balance\");\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"from_account\": \"01824630126\",\r\n  \"to_account\": \"01824978944\",\r\n  \"amount\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check customer 2's transaction ID is valid or not",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check transaction ID is valid or not\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"Transaction not found\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/search/TXN4743088",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"search",
								"TXN4743088"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Merchant",
			"item": [
				{
					"name": "Check merchant's balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if balance is displayed\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User balance\");\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01824978944",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01824978944"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check merchant's account exist or not for showing balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData= pm.response.json();\r",
									"pm.test(\"Check if merchant account exist\", function () {\r",
									"    pm.expect(jsonData.message).includes(\"User not found\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{token}}",
								"type": "text"
							},
							{
								"key": "X-Auth-Secret-Key",
								"value": "{{partnerKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01824978944",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01824978944"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGlmaWVyIjoiYWRtaW5Acm9hZHRvY2FyZWVyLm5ldCIsInJvbGUiOiJBZG1pbiIsImlhdCI6MTczNjAwNTMwNiwiZXhwIjoxNzM2MDA4OTA2fQ.LOM5DCBOkqZiKh0QP_aB8_LuGAjXQ9jAaNPQAO4yPd8"
		},
		{
			"key": "baseUrl",
			"value": "https://dmoney.roadtocareer.net",
			"type": "string"
		},
		{
			"key": "partnerKey",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "phoneNumber",
			"value": "01824100265"
		},
		{
			"key": "userEmail",
			"value": "elliot57@yahoo.com"
		}
	]
}